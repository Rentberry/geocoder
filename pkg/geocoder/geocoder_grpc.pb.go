// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package geocoder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GeocodeServiceClient is the client API for GeocodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeocodeServiceClient interface {
	Geocode(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
}

type geocodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeocodeServiceClient(cc grpc.ClientConnInterface) GeocodeServiceClient {
	return &geocodeServiceClient{cc}
}

func (c *geocodeServiceClient) Geocode(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/geocoder.GeocodeService/Geocode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeocodeServiceServer is the server API for GeocodeService service.
// All implementations must embed UnimplementedGeocodeServiceServer
// for forward compatibility
type GeocodeServiceServer interface {
	Geocode(context.Context, *LocationRequest) (*LocationResponse, error)
	mustEmbedUnimplementedGeocodeServiceServer()
}

// UnimplementedGeocodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeocodeServiceServer struct {
}

func (*UnimplementedGeocodeServiceServer) Geocode(context.Context, *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Geocode not implemented")
}
func (*UnimplementedGeocodeServiceServer) mustEmbedUnimplementedGeocodeServiceServer() {}

func RegisterGeocodeServiceServer(s *grpc.Server, srv GeocodeServiceServer) {
	s.RegisterService(&_GeocodeService_serviceDesc, srv)
}

func _GeocodeService_Geocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocodeServiceServer).Geocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocoder.GeocodeService/Geocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocodeServiceServer).Geocode(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeocodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geocoder.GeocodeService",
	HandlerType: (*GeocodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Geocode",
			Handler:    _GeocodeService_Geocode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geocoder.proto",
}

// TimezoneServiceClient is the client API for TimezoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimezoneServiceClient interface {
	Lookup(ctx context.Context, in *TimezoneRequest, opts ...grpc.CallOption) (*Timezone, error)
}

type timezoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimezoneServiceClient(cc grpc.ClientConnInterface) TimezoneServiceClient {
	return &timezoneServiceClient{cc}
}

func (c *timezoneServiceClient) Lookup(ctx context.Context, in *TimezoneRequest, opts ...grpc.CallOption) (*Timezone, error) {
	out := new(Timezone)
	err := c.cc.Invoke(ctx, "/geocoder.TimezoneService/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimezoneServiceServer is the server API for TimezoneService service.
// All implementations must embed UnimplementedTimezoneServiceServer
// for forward compatibility
type TimezoneServiceServer interface {
	Lookup(context.Context, *TimezoneRequest) (*Timezone, error)
	mustEmbedUnimplementedTimezoneServiceServer()
}

// UnimplementedTimezoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimezoneServiceServer struct {
}

func (*UnimplementedTimezoneServiceServer) Lookup(context.Context, *TimezoneRequest) (*Timezone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (*UnimplementedTimezoneServiceServer) mustEmbedUnimplementedTimezoneServiceServer() {}

func RegisterTimezoneServiceServer(s *grpc.Server, srv TimezoneServiceServer) {
	s.RegisterService(&_TimezoneService_serviceDesc, srv)
}

func _TimezoneService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezoneServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocoder.TimezoneService/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezoneServiceServer).Lookup(ctx, req.(*TimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimezoneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geocoder.TimezoneService",
	HandlerType: (*TimezoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _TimezoneService_Lookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geocoder.proto",
}
